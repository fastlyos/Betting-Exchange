//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.544.
// 
#pragma warning disable 1591

namespace BetEx247.Plugin.Payments.ApcoFastPay.biz.apsp.api {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="https://www.apsp.biz/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DoTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback BypassAcquirerProcessingOperationCompleted;
        
        private System.Threading.SendOrPostCallback Do3DSTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback S3DProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVbVSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDDROperationCompleted;
        
        private System.Threading.SendOrPostCallback setBatchFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBatchFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMerchantInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNextAMTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckoutReadReceiptOperationCompleted;
        
        private System.Threading.SendOrPostCallback get3DSTransactionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTransactionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback isCardPendingSVPVerificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifySVPOperationCompleted;
        
        private System.Threading.SendOrPostCallback setOnHoldOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::BetEx247.Plugin.Payments.ApcoFastPay.Properties.Settings.Default.BetEx247_Plugin_Payments_ApcoFastPay_biz_apsp_api_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DoTransactionCompletedEventHandler DoTransactionCompleted;
        
        /// <remarks/>
        public event BypassAcquirerProcessingCompletedEventHandler BypassAcquirerProcessingCompleted;
        
        /// <remarks/>
        public event Do3DSTransactionCompletedEventHandler Do3DSTransactionCompleted;
        
        /// <remarks/>
        public event S3DProcessCompletedEventHandler S3DProcessCompleted;
        
        /// <remarks/>
        public event getVbVSignatureCompletedEventHandler getVbVSignatureCompleted;
        
        /// <remarks/>
        public event getDDRCompletedEventHandler getDDRCompleted;
        
        /// <remarks/>
        public event setBatchFileCompletedEventHandler setBatchFileCompleted;
        
        /// <remarks/>
        public event getBatchFileCompletedEventHandler getBatchFileCompleted;
        
        /// <remarks/>
        public event GetMerchantInfoCompletedEventHandler GetMerchantInfoCompleted;
        
        /// <remarks/>
        public event getNextAMTransactionsCompletedEventHandler getNextAMTransactionsCompleted;
        
        /// <remarks/>
        public event CheckoutReadReceiptCompletedEventHandler CheckoutReadReceiptCompleted;
        
        /// <remarks/>
        public event get3DSTransactionStatusCompletedEventHandler get3DSTransactionStatusCompleted;
        
        /// <remarks/>
        public event getTransactionStatusCompletedEventHandler getTransactionStatusCompleted;
        
        /// <remarks/>
        public event isCardPendingSVPVerificationCompletedEventHandler isCardPendingSVPVerificationCompleted;
        
        /// <remarks/>
        public event verifySVPCompletedEventHandler verifySVPCompleted;
        
        /// <remarks/>
        public event setOnHoldCompletedEventHandler setOnHoldCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/DoTransaction", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoTransaction(
                    string MerchID, 
                    string Pass, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3) {
            object[] results = this.Invoke("DoTransaction", new object[] {
                        MerchID,
                        Pass,
                        TrType,
                        CardNum,
                        CVV2,
                        ExpDay,
                        ExpMonth,
                        ExpYear,
                        CardHName,
                        Amount,
                        CurrencyCode,
                        Addr,
                        PostCode,
                        TransID,
                        UserIP,
                        UDF1,
                        UDF2,
                        UDF3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoTransactionAsync(
                    string MerchID, 
                    string Pass, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3) {
            this.DoTransactionAsync(MerchID, Pass, TrType, CardNum, CVV2, ExpDay, ExpMonth, ExpYear, CardHName, Amount, CurrencyCode, Addr, PostCode, TransID, UserIP, UDF1, UDF2, UDF3, null);
        }
        
        /// <remarks/>
        public void DoTransactionAsync(
                    string MerchID, 
                    string Pass, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    object userState) {
            if ((this.DoTransactionOperationCompleted == null)) {
                this.DoTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTransactionOperationCompleted);
            }
            this.InvokeAsync("DoTransaction", new object[] {
                        MerchID,
                        Pass,
                        TrType,
                        CardNum,
                        CVV2,
                        ExpDay,
                        ExpMonth,
                        ExpYear,
                        CardHName,
                        Amount,
                        CurrencyCode,
                        Addr,
                        PostCode,
                        TransID,
                        UserIP,
                        UDF1,
                        UDF2,
                        UDF3}, this.DoTransactionOperationCompleted, userState);
        }
        
        private void OnDoTransactionOperationCompleted(object arg) {
            if ((this.DoTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTransactionCompleted(this, new DoTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/BypassAcquirerProcessing", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BypassAcquirerProcessing(
                    string MerchID, 
                    string Pass, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    string BankCode, 
                    string BankResponse, 
                    string BankAccept, 
                    string BankTransID, 
                    string AuthCode) {
            object[] results = this.Invoke("BypassAcquirerProcessing", new object[] {
                        MerchID,
                        Pass,
                        TrType,
                        CardNum,
                        CVV2,
                        ExpDay,
                        ExpMonth,
                        ExpYear,
                        CardHName,
                        Amount,
                        CurrencyCode,
                        Addr,
                        PostCode,
                        TransID,
                        UserIP,
                        UDF1,
                        UDF2,
                        UDF3,
                        BankCode,
                        BankResponse,
                        BankAccept,
                        BankTransID,
                        AuthCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BypassAcquirerProcessingAsync(
                    string MerchID, 
                    string Pass, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    string BankCode, 
                    string BankResponse, 
                    string BankAccept, 
                    string BankTransID, 
                    string AuthCode) {
            this.BypassAcquirerProcessingAsync(MerchID, Pass, TrType, CardNum, CVV2, ExpDay, ExpMonth, ExpYear, CardHName, Amount, CurrencyCode, Addr, PostCode, TransID, UserIP, UDF1, UDF2, UDF3, BankCode, BankResponse, BankAccept, BankTransID, AuthCode, null);
        }
        
        /// <remarks/>
        public void BypassAcquirerProcessingAsync(
                    string MerchID, 
                    string Pass, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    string BankCode, 
                    string BankResponse, 
                    string BankAccept, 
                    string BankTransID, 
                    string AuthCode, 
                    object userState) {
            if ((this.BypassAcquirerProcessingOperationCompleted == null)) {
                this.BypassAcquirerProcessingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBypassAcquirerProcessingOperationCompleted);
            }
            this.InvokeAsync("BypassAcquirerProcessing", new object[] {
                        MerchID,
                        Pass,
                        TrType,
                        CardNum,
                        CVV2,
                        ExpDay,
                        ExpMonth,
                        ExpYear,
                        CardHName,
                        Amount,
                        CurrencyCode,
                        Addr,
                        PostCode,
                        TransID,
                        UserIP,
                        UDF1,
                        UDF2,
                        UDF3,
                        BankCode,
                        BankResponse,
                        BankAccept,
                        BankTransID,
                        AuthCode}, this.BypassAcquirerProcessingOperationCompleted, userState);
        }
        
        private void OnBypassAcquirerProcessingOperationCompleted(object arg) {
            if ((this.BypassAcquirerProcessingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BypassAcquirerProcessingCompleted(this, new BypassAcquirerProcessingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/Do3DSTransaction", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Do3DSTransaction(
                    string MerchID, 
                    string MerchPassword, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    string OrderRef) {
            object[] results = this.Invoke("Do3DSTransaction", new object[] {
                        MerchID,
                        MerchPassword,
                        TrType,
                        CardNum,
                        CVV2,
                        ExpDay,
                        ExpMonth,
                        ExpYear,
                        CardHName,
                        Amount,
                        CurrencyCode,
                        Addr,
                        PostCode,
                        TransID,
                        UserIP,
                        UDF1,
                        UDF2,
                        UDF3,
                        OrderRef});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Do3DSTransactionAsync(
                    string MerchID, 
                    string MerchPassword, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    string OrderRef) {
            this.Do3DSTransactionAsync(MerchID, MerchPassword, TrType, CardNum, CVV2, ExpDay, ExpMonth, ExpYear, CardHName, Amount, CurrencyCode, Addr, PostCode, TransID, UserIP, UDF1, UDF2, UDF3, OrderRef, null);
        }
        
        /// <remarks/>
        public void Do3DSTransactionAsync(
                    string MerchID, 
                    string MerchPassword, 
                    string TrType, 
                    string CardNum, 
                    string CVV2, 
                    string ExpDay, 
                    string ExpMonth, 
                    string ExpYear, 
                    string CardHName, 
                    string Amount, 
                    string CurrencyCode, 
                    string Addr, 
                    string PostCode, 
                    string TransID, 
                    string UserIP, 
                    string UDF1, 
                    string UDF2, 
                    string UDF3, 
                    string OrderRef, 
                    object userState) {
            if ((this.Do3DSTransactionOperationCompleted == null)) {
                this.Do3DSTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDo3DSTransactionOperationCompleted);
            }
            this.InvokeAsync("Do3DSTransaction", new object[] {
                        MerchID,
                        MerchPassword,
                        TrType,
                        CardNum,
                        CVV2,
                        ExpDay,
                        ExpMonth,
                        ExpYear,
                        CardHName,
                        Amount,
                        CurrencyCode,
                        Addr,
                        PostCode,
                        TransID,
                        UserIP,
                        UDF1,
                        UDF2,
                        UDF3,
                        OrderRef}, this.Do3DSTransactionOperationCompleted, userState);
        }
        
        private void OnDo3DSTransactionOperationCompleted(object arg) {
            if ((this.Do3DSTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Do3DSTransactionCompleted(this, new Do3DSTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/S3DProcess", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string S3DProcess(string Password, string Method, string Ticket3D) {
            object[] results = this.Invoke("S3DProcess", new object[] {
                        Password,
                        Method,
                        Ticket3D});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void S3DProcessAsync(string Password, string Method, string Ticket3D) {
            this.S3DProcessAsync(Password, Method, Ticket3D, null);
        }
        
        /// <remarks/>
        public void S3DProcessAsync(string Password, string Method, string Ticket3D, object userState) {
            if ((this.S3DProcessOperationCompleted == null)) {
                this.S3DProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnS3DProcessOperationCompleted);
            }
            this.InvokeAsync("S3DProcess", new object[] {
                        Password,
                        Method,
                        Ticket3D}, this.S3DProcessOperationCompleted, userState);
        }
        
        private void OnS3DProcessOperationCompleted(object arg) {
            if ((this.S3DProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.S3DProcessCompleted(this, new S3DProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/getVbVSignature", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getVbVSignature(string MerchID, string MerchPassword, string Ticket3D) {
            object[] results = this.Invoke("getVbVSignature", new object[] {
                        MerchID,
                        MerchPassword,
                        Ticket3D});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getVbVSignatureAsync(string MerchID, string MerchPassword, string Ticket3D) {
            this.getVbVSignatureAsync(MerchID, MerchPassword, Ticket3D, null);
        }
        
        /// <remarks/>
        public void getVbVSignatureAsync(string MerchID, string MerchPassword, string Ticket3D, object userState) {
            if ((this.getVbVSignatureOperationCompleted == null)) {
                this.getVbVSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVbVSignatureOperationCompleted);
            }
            this.InvokeAsync("getVbVSignature", new object[] {
                        MerchID,
                        MerchPassword,
                        Ticket3D}, this.getVbVSignatureOperationCompleted, userState);
        }
        
        private void OngetVbVSignatureOperationCompleted(object arg) {
            if ((this.getVbVSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVbVSignatureCompleted(this, new getVbVSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/getDDR", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDDR(string MerchID, string Password, string TransID) {
            object[] results = this.Invoke("getDDR", new object[] {
                        MerchID,
                        Password,
                        TransID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDDRAsync(string MerchID, string Password, string TransID) {
            this.getDDRAsync(MerchID, Password, TransID, null);
        }
        
        /// <remarks/>
        public void getDDRAsync(string MerchID, string Password, string TransID, object userState) {
            if ((this.getDDROperationCompleted == null)) {
                this.getDDROperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDDROperationCompleted);
            }
            this.InvokeAsync("getDDR", new object[] {
                        MerchID,
                        Password,
                        TransID}, this.getDDROperationCompleted, userState);
        }
        
        private void OngetDDROperationCompleted(object arg) {
            if ((this.getDDRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDDRCompleted(this, new getDDRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/setBatchFile", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool setBatchFile(string MerchID, string Password, string batchFile, string Delimiter, ref string strReturn) {
            object[] results = this.Invoke("setBatchFile", new object[] {
                        MerchID,
                        Password,
                        batchFile,
                        Delimiter,
                        strReturn});
            strReturn = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setBatchFileAsync(string MerchID, string Password, string batchFile, string Delimiter, string strReturn) {
            this.setBatchFileAsync(MerchID, Password, batchFile, Delimiter, strReturn, null);
        }
        
        /// <remarks/>
        public void setBatchFileAsync(string MerchID, string Password, string batchFile, string Delimiter, string strReturn, object userState) {
            if ((this.setBatchFileOperationCompleted == null)) {
                this.setBatchFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetBatchFileOperationCompleted);
            }
            this.InvokeAsync("setBatchFile", new object[] {
                        MerchID,
                        Password,
                        batchFile,
                        Delimiter,
                        strReturn}, this.setBatchFileOperationCompleted, userState);
        }
        
        private void OnsetBatchFileOperationCompleted(object arg) {
            if ((this.setBatchFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setBatchFileCompleted(this, new setBatchFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/getBatchFile", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getBatchFile(string MerchID, string Password, string BatchRef) {
            object[] results = this.Invoke("getBatchFile", new object[] {
                        MerchID,
                        Password,
                        BatchRef});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBatchFileAsync(string MerchID, string Password, string BatchRef) {
            this.getBatchFileAsync(MerchID, Password, BatchRef, null);
        }
        
        /// <remarks/>
        public void getBatchFileAsync(string MerchID, string Password, string BatchRef, object userState) {
            if ((this.getBatchFileOperationCompleted == null)) {
                this.getBatchFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBatchFileOperationCompleted);
            }
            this.InvokeAsync("getBatchFile", new object[] {
                        MerchID,
                        Password,
                        BatchRef}, this.getBatchFileOperationCompleted, userState);
        }
        
        private void OngetBatchFileOperationCompleted(object arg) {
            if ((this.getBatchFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBatchFileCompleted(this, new getBatchFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/GetMerchantInfo", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMerchantInfo(string MCHCode, string MCHPass) {
            object[] results = this.Invoke("GetMerchantInfo", new object[] {
                        MCHCode,
                        MCHPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMerchantInfoAsync(string MCHCode, string MCHPass) {
            this.GetMerchantInfoAsync(MCHCode, MCHPass, null);
        }
        
        /// <remarks/>
        public void GetMerchantInfoAsync(string MCHCode, string MCHPass, object userState) {
            if ((this.GetMerchantInfoOperationCompleted == null)) {
                this.GetMerchantInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMerchantInfoOperationCompleted);
            }
            this.InvokeAsync("GetMerchantInfo", new object[] {
                        MCHCode,
                        MCHPass}, this.GetMerchantInfoOperationCompleted, userState);
        }
        
        private void OnGetMerchantInfoOperationCompleted(object arg) {
            if ((this.GetMerchantInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMerchantInfoCompleted(this, new GetMerchantInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/getNextAMTransactions", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getNextAMTransactions(string MCHCode, string MCHPass, string sDate, bool BankAccept, string Trntype, string IPAddress) {
            object[] results = this.Invoke("getNextAMTransactions", new object[] {
                        MCHCode,
                        MCHPass,
                        sDate,
                        BankAccept,
                        Trntype,
                        IPAddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getNextAMTransactionsAsync(string MCHCode, string MCHPass, string sDate, bool BankAccept, string Trntype, string IPAddress) {
            this.getNextAMTransactionsAsync(MCHCode, MCHPass, sDate, BankAccept, Trntype, IPAddress, null);
        }
        
        /// <remarks/>
        public void getNextAMTransactionsAsync(string MCHCode, string MCHPass, string sDate, bool BankAccept, string Trntype, string IPAddress, object userState) {
            if ((this.getNextAMTransactionsOperationCompleted == null)) {
                this.getNextAMTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNextAMTransactionsOperationCompleted);
            }
            this.InvokeAsync("getNextAMTransactions", new object[] {
                        MCHCode,
                        MCHPass,
                        sDate,
                        BankAccept,
                        Trntype,
                        IPAddress}, this.getNextAMTransactionsOperationCompleted, userState);
        }
        
        private void OngetNextAMTransactionsOperationCompleted(object arg) {
            if ((this.getNextAMTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNextAMTransactionsCompleted(this, new getNextAMTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/CheckoutReadReceipt", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckoutReadReceipt(string MCHCode, string MCHPass, string PSPTransID, ref string sError) {
            object[] results = this.Invoke("CheckoutReadReceipt", new object[] {
                        MCHCode,
                        MCHPass,
                        PSPTransID,
                        sError});
            sError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckoutReadReceiptAsync(string MCHCode, string MCHPass, string PSPTransID, string sError) {
            this.CheckoutReadReceiptAsync(MCHCode, MCHPass, PSPTransID, sError, null);
        }
        
        /// <remarks/>
        public void CheckoutReadReceiptAsync(string MCHCode, string MCHPass, string PSPTransID, string sError, object userState) {
            if ((this.CheckoutReadReceiptOperationCompleted == null)) {
                this.CheckoutReadReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckoutReadReceiptOperationCompleted);
            }
            this.InvokeAsync("CheckoutReadReceipt", new object[] {
                        MCHCode,
                        MCHPass,
                        PSPTransID,
                        sError}, this.CheckoutReadReceiptOperationCompleted, userState);
        }
        
        private void OnCheckoutReadReceiptOperationCompleted(object arg) {
            if ((this.CheckoutReadReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckoutReadReceiptCompleted(this, new CheckoutReadReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/get3DSTransactionStatus", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string get3DSTransactionStatus(string MCHCode, string MCHPass, string Ticket3D) {
            object[] results = this.Invoke("get3DSTransactionStatus", new object[] {
                        MCHCode,
                        MCHPass,
                        Ticket3D});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get3DSTransactionStatusAsync(string MCHCode, string MCHPass, string Ticket3D) {
            this.get3DSTransactionStatusAsync(MCHCode, MCHPass, Ticket3D, null);
        }
        
        /// <remarks/>
        public void get3DSTransactionStatusAsync(string MCHCode, string MCHPass, string Ticket3D, object userState) {
            if ((this.get3DSTransactionStatusOperationCompleted == null)) {
                this.get3DSTransactionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget3DSTransactionStatusOperationCompleted);
            }
            this.InvokeAsync("get3DSTransactionStatus", new object[] {
                        MCHCode,
                        MCHPass,
                        Ticket3D}, this.get3DSTransactionStatusOperationCompleted, userState);
        }
        
        private void Onget3DSTransactionStatusOperationCompleted(object arg) {
            if ((this.get3DSTransactionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get3DSTransactionStatusCompleted(this, new get3DSTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/getTransactionStatus", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getTransactionStatus(string MerchID, string MerchPass, string ORef) {
            object[] results = this.Invoke("getTransactionStatus", new object[] {
                        MerchID,
                        MerchPass,
                        ORef});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTransactionStatusAsync(string MerchID, string MerchPass, string ORef) {
            this.getTransactionStatusAsync(MerchID, MerchPass, ORef, null);
        }
        
        /// <remarks/>
        public void getTransactionStatusAsync(string MerchID, string MerchPass, string ORef, object userState) {
            if ((this.getTransactionStatusOperationCompleted == null)) {
                this.getTransactionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransactionStatusOperationCompleted);
            }
            this.InvokeAsync("getTransactionStatus", new object[] {
                        MerchID,
                        MerchPass,
                        ORef}, this.getTransactionStatusOperationCompleted, userState);
        }
        
        private void OngetTransactionStatusOperationCompleted(object arg) {
            if ((this.getTransactionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransactionStatusCompleted(this, new getTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/isCardPendingSVPVerification", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isCardPendingSVPVerification(string MerchID, string MerchPass, string CardHash, ref System.Data.DataSet SVPTransaction) {
            object[] results = this.Invoke("isCardPendingSVPVerification", new object[] {
                        MerchID,
                        MerchPass,
                        CardHash,
                        SVPTransaction});
            SVPTransaction = ((System.Data.DataSet)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isCardPendingSVPVerificationAsync(string MerchID, string MerchPass, string CardHash, System.Data.DataSet SVPTransaction) {
            this.isCardPendingSVPVerificationAsync(MerchID, MerchPass, CardHash, SVPTransaction, null);
        }
        
        /// <remarks/>
        public void isCardPendingSVPVerificationAsync(string MerchID, string MerchPass, string CardHash, System.Data.DataSet SVPTransaction, object userState) {
            if ((this.isCardPendingSVPVerificationOperationCompleted == null)) {
                this.isCardPendingSVPVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisCardPendingSVPVerificationOperationCompleted);
            }
            this.InvokeAsync("isCardPendingSVPVerification", new object[] {
                        MerchID,
                        MerchPass,
                        CardHash,
                        SVPTransaction}, this.isCardPendingSVPVerificationOperationCompleted, userState);
        }
        
        private void OnisCardPendingSVPVerificationOperationCompleted(object arg) {
            if ((this.isCardPendingSVPVerificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isCardPendingSVPVerificationCompleted(this, new isCardPendingSVPVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/verifySVP", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool verifySVP(string MerchID, string MerchPass, string CardHash, string SVP) {
            object[] results = this.Invoke("verifySVP", new object[] {
                        MerchID,
                        MerchPass,
                        CardHash,
                        SVP});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void verifySVPAsync(string MerchID, string MerchPass, string CardHash, string SVP) {
            this.verifySVPAsync(MerchID, MerchPass, CardHash, SVP, null);
        }
        
        /// <remarks/>
        public void verifySVPAsync(string MerchID, string MerchPass, string CardHash, string SVP, object userState) {
            if ((this.verifySVPOperationCompleted == null)) {
                this.verifySVPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifySVPOperationCompleted);
            }
            this.InvokeAsync("verifySVP", new object[] {
                        MerchID,
                        MerchPass,
                        CardHash,
                        SVP}, this.verifySVPOperationCompleted, userState);
        }
        
        private void OnverifySVPOperationCompleted(object arg) {
            if ((this.verifySVPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifySVPCompleted(this, new verifySVPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.apsp.biz/setOnHold", RequestNamespace="https://www.apsp.biz/", ResponseNamespace="https://www.apsp.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool setOnHold(string MerchID, string MerchPass, string TransID) {
            object[] results = this.Invoke("setOnHold", new object[] {
                        MerchID,
                        MerchPass,
                        TransID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setOnHoldAsync(string MerchID, string MerchPass, string TransID) {
            this.setOnHoldAsync(MerchID, MerchPass, TransID, null);
        }
        
        /// <remarks/>
        public void setOnHoldAsync(string MerchID, string MerchPass, string TransID, object userState) {
            if ((this.setOnHoldOperationCompleted == null)) {
                this.setOnHoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetOnHoldOperationCompleted);
            }
            this.InvokeAsync("setOnHold", new object[] {
                        MerchID,
                        MerchPass,
                        TransID}, this.setOnHoldOperationCompleted, userState);
        }
        
        private void OnsetOnHoldOperationCompleted(object arg) {
            if ((this.setOnHoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setOnHoldCompleted(this, new setOnHoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoTransactionCompletedEventHandler(object sender, DoTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BypassAcquirerProcessingCompletedEventHandler(object sender, BypassAcquirerProcessingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BypassAcquirerProcessingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BypassAcquirerProcessingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Do3DSTransactionCompletedEventHandler(object sender, Do3DSTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Do3DSTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Do3DSTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void S3DProcessCompletedEventHandler(object sender, S3DProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class S3DProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal S3DProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getVbVSignatureCompletedEventHandler(object sender, getVbVSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVbVSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVbVSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDDRCompletedEventHandler(object sender, getDDRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDDRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDDRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setBatchFileCompletedEventHandler(object sender, setBatchFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setBatchFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setBatchFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strReturn {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getBatchFileCompletedEventHandler(object sender, getBatchFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBatchFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBatchFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMerchantInfoCompletedEventHandler(object sender, GetMerchantInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMerchantInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMerchantInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getNextAMTransactionsCompletedEventHandler(object sender, getNextAMTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNextAMTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNextAMTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckoutReadReceiptCompletedEventHandler(object sender, CheckoutReadReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckoutReadReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckoutReadReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void get3DSTransactionStatusCompletedEventHandler(object sender, get3DSTransactionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get3DSTransactionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get3DSTransactionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTransactionStatusCompletedEventHandler(object sender, getTransactionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransactionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTransactionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void isCardPendingSVPVerificationCompletedEventHandler(object sender, isCardPendingSVPVerificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isCardPendingSVPVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isCardPendingSVPVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet SVPTransaction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void verifySVPCompletedEventHandler(object sender, verifySVPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifySVPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifySVPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setOnHoldCompletedEventHandler(object sender, setOnHoldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setOnHoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setOnHoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591